filter {
  mutate {
    replace => {
      "type" => ""
      "time" => ""
      "specversion" => ""
      "id" => ""
      "data.message" => ""
      "data.eventName" => ""
      "data.compartmentId" => ""
      "data.compartmentName" => ""
      "data.eventGroupingId" => ""
      "data.identity.ipAddress" => ""
      "data.identity.principalId" => ""
      "data.identity.principalName" => ""
      "data.identity.userAgent" => ""
      "data.identity.credentials" => ""
      "data.identity.consoleSessionId" => ""
      "data.identity.tenantId" => ""
      "data.request.action" => ""
      "data.request.path" => ""
      "data.request.headers.Accept.0" => ""
      "data.request.headers.Accept-Encoding.0" => ""
      "data.request.headers.Connection.0" => ""
      "data.request.headers.Origin.0" => ""
      "data.request.headers.Referer.0" => ""
      "data.request.headers.authorization.0" => ""
      "data.request.headers.opc-request-id.0" => ""
      "data.request.headers.sec-ch-ua-platform.0" => ""
      "data.request.parameters.param0.0" => ""
      "data.request.parameters.param1.0" => ""
      "data.response.headers.Content-Length.0" => ""
      "data.response.headers.Content-Type.0" => ""
      "data.response.headers.access-control-allow-methods.0" => ""
      "data.resourceId" => ""
      "data.response.status" => ""
      "metadata_event_type" => "GENERIC_EVENT"
      "oracle.compartmentid" => ""
      "oracle.tenantid" => ""
      "ip1" => ""
      "ip2" => ""
      "createdby" => ""
    }
  }

  json {
    source => "message"
    array_function => "split_columns"
    on_error => "not_valid_json"
  }





#known VERB  (Create|Update|Delete|Attach|Detach|Get|List|Launch|Terminate)
grok {
  match => {
    "product_event_type" => "com\.oraclecloud\.%{WORD:service}\.(?<verb>Create|Email|Update|Delete|Attach|Detach|Get|List|Launch|Terminate)(?<entity>\w+)"
  }
}


#identityControlPlane
if [service] == "identityControlPlane" {
  if [verb] == "Create" {
    mutate {
      replace => { "[event][metadata][event_type]" => "USER_ACCOUNT_CHANGE" }
    }
  } else if [verb] == "Get" or if [verb] == 'List' {

    mutate {
      replace => { "[event][metadata][event_type]" => "RESOURCE_READ" }
    }
  } else if [verb] == "Add" {
    mutate {
      replace => { "[event][metadata][event_type]" => "USER_CHANGE_PERMISSIONS" }
    }
  } 
    else if [verb] == "Email" {
    mutate {
      replace => { "[event][metadata][event_type]" => "NOTIFICATION_STATUS" }
    }
  } 
    else if [verb] == "Update" and [entity] == "Device"  {
    mutate {
      replace => { "[event][metadata][event_type]" => "DEVICE_CONFIG_UPDATE" }
    }
  }  
    else if [verb] == "Update" and [entity] == "Group"  {
    mutate {
      replace => { "[event][metadata][event_type]" => "GROUP_MODIFICATION" }
    }
  }
    else if [verb] == "Update" and [entity] == "Group"  {
    mutate {
      replace => { "[event][metadata][event_type]" => "ssosettings" }
    }
  }
    else {
    mutate {
      replace => { "[event][metadata][event_type]" => "GENERIC_EVENT" }
    }
  }
}



#identitysignon
if [service] == "identitySignOn" {
   if [verb] == "Delete" {
      mutate {
        replace => { "[event][metadata][event_type]" => "USER_LOGOUT" }
      }
 } else {
      mutate {
        replace => { "[event][metadata][event_type]" => "USER_LOGIN" }
     }
 }
}



if [service == "computeApi" {
   if [verb] == "Attach" {
       mutate {
          replace => { "[event][metadata][event_type]" => "RESOURCE_OPERATION" }
       }
    } 
      else if [verb] == "Get" or [verb] == "List" {
       mutate  {
          replace => { "[event][metadata][event_type]" => "RESOURCE_READ" }
       }
    }
      else if [verb] == "Update" {
	mutate {
	  replace => { "[event][metadata][event_type]" => "RESOURCE_UPDATE" }
       }
    }
}



if [service] == "virtualNetwork" {
    if [verb] == "Create" {
      mutate {
         replace => { "[event][metadata][event_type]" => "RESOURCE_CREATION" }
        }
    }
    else if [verb] == "List" or [verb] ==  "Get" {
      mutate {
         replace => { "[event][metadata][event_type]" => "RESOURCE_READ" }
        }
    }
    else if [verb] == "Attach" or [verb] == "Detach" {
      mutate {
          replace => {"[event][metadata][event_type]" => "RESOURCE_OPERATION" }
       }
    }
    else if [verb] == "Delete" {
      mutate {
          replace => { "[event][metadata][event_type]" => "RESOURCE_DELETE" }
      }
    }
}

#blockVolume
if [service] == "BlockVolumes" {
   if [verb] == "Create" {
      mutate {
         replace => { "[event][metadata][event_type]" => "RESOURCE_CREATE" }
      }
   }
   else if [verb] == "Get" or [verb] == "List" {
      mutate {
         replace => { "[event][metadata][event_type]" => "RESOURCE_READ" }
         }
   }
   else if [verb] == "Update" {
      mutate {
         replace => {"[event][metadata][event_type]" => "RESOURCE_UPDATE" }
      }
   }
   else if [verb] == "Delete" {
      mutate {
        replace =>  { "[event][metadata][event_type]" => "RESOURCE_DELETE" }
     }
   }    
}  


#compartments
if [service] == "Compartments" {
   if [verb] "Get" or [verb] == "List" {
      mutate {
         replace => { "[event][metadata][event_type]" => "RESOURCE_READ" }
      }
   }
}
 


#objectstorage
if [service] == "objectstorage" {
   if [verb] == "Get" or [verb] == "List" {
      mutate {
         replace => { "[event][metadata][event_type]" => "RESOURCE_READ" }}
      }
   }
}


#natgateway
if [service] == "natgateway" {
   if [verb] == "Get" or [verb] == "List" {
      mutate {
         replace => { "[event][metadata][event_type]" => "RESOURCE_READ" }}
      }
   }
}

#ServiceConnector
if [service] == "Get" or [service] == "List" {
   mutate {
      replace => { "[event][metadata][event_type]" => "RESOURCE_READ" }
   }
}

#Streaming-ControlPlane
if [service] == "Streaming-ControlPlane" {
   if [verb] == "Get" {
      mutate {
         replace => { "[event][metadata][event_type]" => "RESOURCE_READ"}
      }
   }
}


#statedump{ label => "--------END--------"}
    # Change output to UDM event.
    mutate {
        rename => {
            "output" => "event.idm.read_only_udm"
        }
    }

    # Generate Event
    mutate {
        merge => {
            "@output" => "event" 
        }
    }
